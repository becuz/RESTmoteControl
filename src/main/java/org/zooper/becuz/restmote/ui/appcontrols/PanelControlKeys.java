/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.zooper.becuz.restmote.ui.appcontrols;

import java.awt.event.KeyEvent;

import javax.swing.JLabel;

import org.zooper.becuz.restmote.model.Control;
import org.zooper.becuz.restmote.model.KeysEvent;
import org.zooper.becuz.restmote.ui.UIUtils;

/**
 * Panel to view and edit the shortcut of a {@link Control}
 * @author admin
 */
@SuppressWarnings("serial")
public class PanelControlKeys extends javax.swing.JPanel {

	/**
	 * model Control
	 */
	private Control control;
	
	/**
	 * current index of {@link Control#getKeysEvents()}
	 */
	private int indexKeysEvents;
	
	/**
	 * Creates new form PanelControlKeys
	 */
	public PanelControlKeys() {
		initComponents();
		lblPaging.setHorizontalAlignment(JLabel.CENTER);
	}

	/**
	 * Set the Contol to edit
	 * @param control
	 */
	public void setControl(Control control){
		this.control = control;
		indexKeysEvents = 0;
		setEnabled(control != null);
		UIUtils.setEnabledRecursive(this, control != null);
		copyToView();
	}
	
	/**
	 * Update the view accordingly to the {@link #control}
	 */
	private void copyToView(){
		textFieldKeyStroke.setText("");
		lblPaging.setText(null);
		checkBoxKeyAlt.setSelected(false);
		checkBoxKeyCtrl.setSelected(false);
		checkBoxKeyShift.setSelected(false);
		btnPrev.setEnabled(indexKeysEvents > 0);
		btnNext.setText(control == null || indexKeysEvents == control.getKeysEvents().size()-1 ? "+" : ">");
		if (control != null){
			KeysEvent[] keysEventsArray = new KeysEvent[control.getKeysEvents().size()];
			control.getKeysEvents().toArray(keysEventsArray);
			KeysEvent currentKeysEvent = keysEventsArray[indexKeysEvents];
			String keysText = new String();
			if (currentKeysEvent.getKeys() != null){
				for(Integer key: currentKeysEvent.getKeys()){
					if (key.equals(KeyEvent.VK_ALT)){
						checkBoxKeyAlt.setSelected(true);
					} else if (key.equals(KeyEvent.VK_CONTROL)){
						checkBoxKeyCtrl.setSelected(true);
					} else if (key.equals(KeyEvent.VK_SHIFT)){
						checkBoxKeyShift.setSelected(true);
					}
					if (keysText.length() > 0){
						keysText += "+";
					}
					keysText += (KeyEvent.getKeyText(key));
				}
				textFieldKeyStroke.setText(keysText);
			}
			lblPaging.setText((indexKeysEvents+1) + "/" + control.getKeysEvents().size());
		}
		
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboVirtualKey = new javax.swing.JComboBox();
        textFieldKeyStroke = new javax.swing.JTextField();
        checkBoxKeyCtrl = new javax.swing.JCheckBox();
        checkBoxKeyAlt = new javax.swing.JCheckBox();
        checkBoxKeyShift = new javax.swing.JCheckBox();
        lblComboVirtualKey = new javax.swing.JLabel();
        lblTextFieldKeyStroke = new javax.swing.JLabel();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        lblPaging = new javax.swing.JLabel();

        comboVirtualKey.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        textFieldKeyStroke.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldKeyStrokeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldKeyStrokeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldKeyStrokeKeyTyped(evt);
            }
        });

        checkBoxKeyCtrl.setText("Ctrl");
        checkBoxKeyCtrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxKeyCtrlActionPerformed(evt);
            }
        });

        checkBoxKeyAlt.setText("Alt");
        checkBoxKeyAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxKeyAltActionPerformed(evt);
            }
        });

        checkBoxKeyShift.setText("Shift");
        checkBoxKeyShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxKeyShiftActionPerformed(evt);
            }
        });

        lblComboVirtualKey.setText("Virtual Key:");

        lblTextFieldKeyStroke.setText("Key Stroke:");

        btnPrev.setText("<");
        btnPrev.setFocusPainted(false);
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setText(">");
        btnNext.setFocusPainted(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        lblPaging.setText("0/0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblTextFieldKeyStroke, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblComboVirtualKey, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnPrev))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPaging, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(37, 37, 37)
                        .addComponent(btnNext)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboVirtualKey, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textFieldKeyStroke, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxKeyCtrl)
                            .addComponent(checkBoxKeyShift))
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxKeyAlt)
                        .addGap(16, 16, 16))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxKeyAlt)
                    .addComponent(checkBoxKeyCtrl)
                    .addComponent(comboVirtualKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblComboVirtualKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxKeyShift)
                    .addComponent(textFieldKeyStroke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTextFieldKeyStroke))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPrev, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNext)
                        .addComponent(lblPaging))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        indexKeysEvents--;
		copyToView();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        indexKeysEvents++;
		if (control.getKeysEvents().size() == indexKeysEvents){
			control.addKeysEvent(new KeysEvent());
		}
		copyToView();
    }//GEN-LAST:event_btnNextActionPerformed

    private void checkBoxKeyCtrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxKeyCtrlActionPerformed
	   checkMetaKey(checkBoxKeyCtrl.isSelected(), KeyEvent.VK_CONTROL);
	   copyToView();
    }//GEN-LAST:event_checkBoxKeyCtrlActionPerformed

    private void checkBoxKeyAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxKeyAltActionPerformed
        System.out.println("checkBoxKeyAltActionPerformed");
		checkMetaKey(checkBoxKeyAlt.isSelected(), KeyEvent.VK_ALT);
		copyToView();
    }//GEN-LAST:event_checkBoxKeyAltActionPerformed

    private void checkBoxKeyShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxKeyShiftActionPerformed
        System.out.println("checkBoxKeyShiftActionPerformed");
		checkMetaKey(checkBoxKeyShift.isSelected(), KeyEvent.VK_SHIFT);
		copyToView();
    }//GEN-LAST:event_checkBoxKeyShiftActionPerformed

	private void checkMetaKey(boolean selected, Integer keyCode){
		KeysEvent[] keysEventsArray = new KeysEvent[control.getKeysEvents().size()];
		keysEventsArray = control.getKeysEvents().toArray(keysEventsArray);
        if (selected){
 			keysEventsArray[indexKeysEvents].getKeys().add(keyCode);
		} else {
 		   keysEventsArray[indexKeysEvents].getKeys().remove(keyCode);
		}
	}
	
    private void textFieldKeyStrokeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyStrokeKeyTyped
        
    }//GEN-LAST:event_textFieldKeyStrokeKeyTyped

    private void textFieldKeyStrokeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyStrokeKeyReleased
        System.out.println("textFieldKeyStrokeKeyTyped");
    }//GEN-LAST:event_textFieldKeyStrokeKeyReleased

    private void textFieldKeyStrokeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyStrokeKeyPressed
        System.out.println("textFieldKeyStrokeKeyPressed");
		KeysEvent[] keysEventsArray = new KeysEvent[control.getKeysEvents().size()];
		keysEventsArray = control.getKeysEvents().toArray(keysEventsArray);
		keysEventsArray[indexKeysEvents].getKeys().clear();
		checkMetaKey(checkBoxKeyAlt.isSelected(), KeyEvent.VK_ALT);
		checkMetaKey(checkBoxKeyCtrl.isSelected(), KeyEvent.VK_CONTROL);
		checkMetaKey(checkBoxKeyShift.isSelected(), KeyEvent.VK_SHIFT);
		keysEventsArray[indexKeysEvents].getKeys().add(evt.getKeyCode());
		evt.consume();
		int keyCode = evt.getKeyCode();
		System.out.println("keyChar " + evt.getKeyChar());
		System.out.println("keyCode " + keyCode);
		System.out.println("TextCode " + KeyEvent.getKeyText(keyCode));
		copyToView();
    }//GEN-LAST:event_textFieldKeyStrokeKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JCheckBox checkBoxKeyAlt;
    private javax.swing.JCheckBox checkBoxKeyCtrl;
    private javax.swing.JCheckBox checkBoxKeyShift;
    private javax.swing.JComboBox comboVirtualKey;
    private javax.swing.JLabel lblComboVirtualKey;
    private javax.swing.JLabel lblPaging;
    private javax.swing.JLabel lblTextFieldKeyStroke;
    private javax.swing.JTextField textFieldKeyStroke;
    // End of variables declaration//GEN-END:variables
}
